"use client"

import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Slider } from '@/components/ui/slider';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Volume2 } from 'lucide-react';

export const MiniDSPController = () => {
  const [masterVolume, setMasterVolume] = useState(-10);  // Default to -10 dB
  const [mute, setMute] = useState(false);
  const [status, setStatus] = useState('');
  const [inputSource, setInputSource] = useState('usb');  // Default to USB
  const [isConnected, setIsConnected] = useState(false);
  const [lastStatus, setLastStatus] = useState(null);  // Store the full status response
  // Initial state with localStorage for gains
  const [outputGains, setOutputGains] = useState(() => {
    // Try to get saved gains from localStorage, or use defaults
    if (typeof window !== 'undefined') {
      const savedGains = window.localStorage.getItem('minidsp-gains');
      if (savedGains) {
        return JSON.parse(savedGains);
      }
    }
    return {
      0: 0,    // Left - default to 0 dB
      1: 0,    // Right - default to 0 dB
      2: -20   // Subwoofer - default to -20 dB
    };
  });
  const [ipAddress, setIpAddress] = useState('192.168.0.67:5380');

  useEffect(() => {
    // Only access localStorage on the client side
    const savedIp = window.localStorage.getItem('minidsp-ip');
    if (savedIp) {
      setIpAddress(savedIp);
    }
  }, []);
  
  // Function to handle API calls through our Next.js proxy
  const callApi = async (endpoint, method = 'GET', body = null) => {
    try {
      const options = {
        method,
        headers: {
          'Content-Type': 'application/json',
          'minidsp-ip': ipAddress,
        },
        ...(body && { body: JSON.stringify(body) }),
      };
      
      // Remove /api from the start of the endpoint as it's included in our proxy route
      const cleanEndpoint = endpoint.replace('/api/', '');
      const response = await fetch(`/api/minidsp/${cleanEndpoint}`, options);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      // Handle empty responses from config endpoints
      if (data.success && !data.text) {
        return null;
      }
      
      return data;
    } catch (error) {
      setStatus(`Error: ${error.message}`);
      console.error('API call failed:', error);
      throw error;
    }
  };

  // Function to save gains to localStorage
  const saveGainsToStorage = (gains) => {
    if (typeof window !== 'undefined') {
      window.localStorage.setItem('minidsp-gains', JSON.stringify(gains));
    }
  };

  // Function to fetch initial state
  const fetchInitialState = async () => {
    try {
      // First get available devices
      const devices = await callApi('devices');
      console.log('Available devices:', devices);
      
      if (!devices || devices.length === 0) {
        throw new Error('No devices found');
      }

      // Get device status for master settings
      const deviceStatus = await callApi('devices/0');
      console.log('Device status:', deviceStatus);
      setLastStatus(deviceStatus);

      if (deviceStatus) {
        const { master } = deviceStatus;
        setMasterVolume(master.volume);
        setMute(master.mute);
        setInputSource(master.source.toLowerCase());
      }

      // Apply saved gain settings to device
      const currentGains = outputGains;
      for (const [output, gain] of Object.entries(currentGains)) {
        await callApi('devices/0/config', 'POST', {
          outputs: [{
            index: parseInt(output),
            gain: gain
          }]
        });
      }

      setIsConnected(true);
    } catch (error) {
      console.error('Error in fetchInitialState:', error);
      throw error;
    }
  };

  // Function to update config and get new status
  const updateConfig = async (config) => {
    // Send config update
    await callApi('devices/0/config', 'POST', config);
    // Get updated status
    const newStatus = await callApi('devices/0');
    setLastStatus(newStatus);
    return newStatus;
  };

  // Handle volume change
  const handleVolumeChange = async (newValue) => {
    setMasterVolume(newValue);
    await updateConfig({
      master_status: {
        volume: newValue
      }
    });
  };

  // Handle mute toggle
  const handleMuteToggle = async () => {
    const newMuteState = !mute;
    setMute(newMuteState);
    await updateConfig({
      master_status: {
        mute: newMuteState
      }
    });
  };

  // Handle input source change
  const handleInputChange = async (value) => {
    setInputSource(value);
    await updateConfig({
      master_status: {
        source: value.charAt(0).toUpperCase() + value.slice(1)
      }
    });
  };

  // Handle output gain change
  const handleGainChange = async (output, value) => {
    try {
      const newValue = Math.min(0, Math.max(-127, value));
      
      // Update local state and save to localStorage
      setOutputGains(prev => {
        const newGains = {
          ...prev,
          [output]: newValue
        };
        saveGainsToStorage(newGains);
        return newGains;
      });

      // Send the update to the device
      await callApi('devices/0/config', 'POST', {
        outputs: [{
          index: output,
          gain: newValue
        }]
      });
    } catch (error) {
      console.error('Failed to update gain:', error);
    }
  };

  return (
    <Card className="w-full max-w-xl">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>MiniDSP Controller</span>
          {isConnected && (
            <Switch 
              checked={!mute}
              onCheckedChange={handleMuteToggle}
              className="ml-4"
            />
          )}
        </CardTitle>
        <div className="mt-4">
          <Label htmlFor="ip-address">MiniDSP IP Address</Label>
          <div className="flex gap-2 mt-1">
            <Input
              id="ip-address"
              type="text"
              value={ipAddress}
              onChange={(e) => {
                setIpAddress(e.target.value);
                localStorage.setItem('minidsp-ip', e.target.value);
              }}
              placeholder="Enter IP address (e.g., 192.168.0.67:5380)"
              className="flex-1"
            />
            <Button 
              onClick={async () => {
                setStatus('');
                try {
                  await fetchInitialState();
                  setIsConnected(true);
                } catch (error) {
                  setStatus('Failed to connect. Please check the IP address.');
                }
              }}
              size="sm"
            >
              Connect
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {isConnected ? (
          <div className="space-y-6">
            <div className="space-y-4">
              <div>
                <Label>Input Source</Label>
                <Select value={inputSource} onValueChange={handleInputChange}>
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Select input source" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="analog">Analog</SelectItem>
                    <SelectItem value="toslink">TOSLINK</SelectItem>
                    <SelectItem value="usb">USB</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label className="mb-2">Master Volume</Label>
                <div className="flex items-center space-x-4">
                  <Volume2 className="h-6 w-6" />
                  <div className="flex-1">
                    <Slider
                      value={[masterVolume]}
                      onValueChange={([value]) => handleVolumeChange(value)}
                      min={-127}
                      max={0}
                      step={0.5}
                      className="w-full"
                      dir="ltr"
                    />
                  </div>
                  <span className="w-16 text-right">{masterVolume.toFixed(1)} dB</span>
                </div>
              </div>

              <div className="space-y-4">
                <Label>Output Gains</Label>
                <div className="grid gap-4">
                  <div className="space-y-2">
                    <Label className="text-sm text-muted-foreground">Left Channel</Label>
                    <div className="flex items-center space-x-4">
                      <div className="flex-1">
                        <Slider
                          value={[outputGains[0] ?? -127]}
                          onValueChange={([value]) => handleGainChange(0, Math.min(0, Math.max(-127, value)))}
                          min={-127}
                          max={0}
                          step={0.5}
                          className="w-full"
                          dir="ltr"
                        />
                      </div>
                      <span className="w-16 text-right">{(outputGains[0] ?? -127).toFixed(1)} dB</span>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm text-muted-foreground">Right Channel</Label>
                    <div className="flex items-center space-x-4">
                      <div className="flex-1">
                        <Slider
                          value={[outputGains[1] ?? -127]}
                          onValueChange={([value]) => handleGainChange(1, Math.min(0, Math.max(-127, value)))}
                          min={-127}
                          max={0}
                          step={0.5}
                          className="w-full"
                          dir="ltr"
                        />
                      </div>
                      <span className="w-16 text-right">{(outputGains[1] ?? -127).toFixed(1)} dB</span>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm text-muted-foreground">Subwoofer</Label>
                    <div className="flex items-center space-x-4">
                      <div className="flex-1">
                        <Slider
                          value={[outputGains[2] ?? -127]}
                          onValueChange={([value]) => handleGainChange(2, Math.min(0, Math.max(-127, value)))}
                          min={-127}
                          max={0}
                          step={0.5}
                          className="w-full"
                          dir="ltr"
                        />
                      </div>
                      <span className="w-16 text-right">{(outputGains[2] ?? -127).toFixed(1)} dB</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="text-center py-8 text-muted-foreground">
            Please enter your MiniDSP's IP address and click Connect
          </div>
        )}
        {status && (
          <div className="text-sm text-red-500 mt-4">
            {status}
          </div>
        )}
      </CardContent>
    </Card>
  );
};
